{"./":{"url":"./","title":"首页","keywords":"","body":"前言 由于软件的的介绍以及相关资料防止在网站的页面上看起来比较混乱 因此在这里创建GitBook来存储相关的资料 起初做此book的原因是为了给新学Delphi的朋友一个界面的介绍，但是由于Delphi的闭源，我们在教学的第一步就会让大家去安装和破解。因此选用开源的Pascal开发工具 CodeTyphon来给大家讲解。CodeTyphon和Delphi的界面基本一致，控件属性也基本一致。 CodeTyphon基础平台：FreePascal -> Lazarus -> CodeTyphon（CodeTyphon可以使用Lazarus也可使用FreePascal的依赖包） 我们这里讲解主要的系统控件和常用的使用方法，以及部分简单代码书写 本册book地址：https://www.280i.com/book/ 本册对应视频讲解地址： B站：https://space.bilibili.com/383418153/ 西瓜视频：https://www.ixigua.com/pseries/6809266274443461132/ 交流QQ群：148178038 视频相对于图片介绍更加完整，包括使用中的一些小细节，这样更适合初次接触软件开发的人群。 对于CodeTyphon的资料，我也是网络上搜集和自己的认知，这里所讲解的都是自己一边学习，一边理解的东西，不理解的我会在book中不标注，或者在视频中注明此处不理解，希望大家可以指导，让这个教学能够持续下去。 这里介绍的资料有： 软件控制台 CodeTyphon入门 Standard控件 至于详细的代码学习，请查看老侯的 跟着老侯学编程。 B站的观看地址：https://space.bilibili.com/323024121 跟着老侯学编程知识库入口： http://knowledge.coder163.com/ Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-03-29 11:09:39 "},"280i_Login/":{"url":"280i_Login/","title":"软件控制台","keywords":"","body":"软件控制台 280i-Login 我们先来看看软件主界面截图： 最新版本下载地址：https://www.280i.com/ann/8048.html 界面简易介绍： ​ 左上角点击后会自动缩放或者展开菜单栏 ​ 设置中可以设置软件的 【自动更新】【自动登录】【最小化程序】【迷你菜单】 ​ 鼠标放置在账号位置可以显示账户VIP时间，点击即可注册/找回密码 ​ 账户右侧菜单中可【更新软件】【获取时间】【打开日志】 软件运行规则： ​ 直接双击软件，或者选择对应软件后点击启动 ​ 若运行的软件不存在，软件会自动下载对应软件后启动 VIP规则： ​ 本站VIP使用统一VIP，充卡后即可享有对应的VIP软件使用权 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-03-26 08:55:19 "},"280i_Login/FishingMan.html":{"url":"280i_Login/FishingMan.html","title":"魔兽世界钓鱼小精灵","keywords":"","body":"魔兽世界钓鱼小精灵 FishingMan 此软件兼容当前所有魔兽世界版本：【正式服】【怀旧服】【私服】 软件运行快捷键：Alt + CapsLock 所有新用户请仔细查看软件中的向导，按照向导设置软件 软件界面介绍： 钓鱼技能位置：钓鱼技能放在按键 0 上 灵敏度：第一次使用，软件会根据游戏版本自动调整灵敏度，如果开始后上鱼率不是很好，可以停止后微调灵敏度 防掉线：这里为防掉线策略，对应游戏中的按键 【-】，可设置宏 /dance 或者 /stand 之类的动作宏放在此处 鱼饵： 一键上饵：只有正式服或者80级以上的怀旧服可用 怀旧上饵：这里要求游戏分辨率必须是1024*768，另外不要修改按键 “C” 对应的快捷键和角色面板的位置 鱼饵放在按键9上面 宏命令：此处的宏请放在按键【=】上，并设置对应的宏即可，可用来使用物品 如：/use 巨大的鱼 售卖垃圾：此功能仅正式服可用，本功能需要用到带NPC的坐骑，详细配置看向导，此设置比较复杂 提示信息：软件开始的时间和上钩的次数 网络延迟上钩：此处代表在点击上钩前延迟多久点击和点击后等待多久再进行新一次钓鱼。 手工拾取：此功能仅60级私服使用，例如N服等 高级模式： 找鱼漂延迟：找到鱼漂后等待判断的时间 声卡模式：获取游戏对应声卡的音量来确定上钩动作，此操作需要搭配游戏内部声卡设置，详细设置看向导 上鱼率：每分钟钓鱼的数量，正式服：4.0 左右，怀旧服 3.2 多一点 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-03-24 16:18:08 "},"280i_Login/NeverStop.html":{"url":"280i_Login/NeverStop.html","title":"永不停歇自动按键","keywords":"","body":"永不停歇自动按键 NeverStop 此软件可多线程操作，在对应的窗口上点击接口给对应的窗口发送按键信息。鼠标操作必须前台操作 软件快捷键 ： Ctrl + Alt + Shift + n 在中间的添加部分，添加对应的按键顺序，然后就可以在左边看到对应的任务队列，左边的队列可以右键导出或者导入。 此软件可以多线程操作，每个窗口点击后就激活一个线程，如果要停止，就在这个窗口上再点击一次快捷键即可。 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-03-24 16:28:38 "},"280i_Login/RandomCheck.html":{"url":"280i_Login/RandomCheck.html","title":"[Free]随机抽签","keywords":"","body":"随机抽签 RandomCheck 此软件可用来日常抽签使用 程序简介： 双击LED区域，可以修改LED显示内容 双击文字区域可修改字体 导入：导入txt列表到上不文字区域，用于抽签的列表 导出：导出下部文字区域的列表到txt文件 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-03-26 21:16:24 "},"CodeTyphon/":{"url":"CodeTyphon/","title":"CodeTyphon入门","keywords":"","body":"媲美Rad xe10的开元Pascal开发工具 这里我们要介绍的 CodeTyphon 是类似Rad xe系列的pascal语言开发工具，只要使用过Delphi7或者xe版本的用户很轻松可以上手此开源IDE。 至于选择开源IDE的原因：由于Delphi是付费软件，当你做一些小软件，不申请著作权的时候确实不错。但是当你逐步做起来后，会发现付费软件在这里又成为你的限制。 Delphi的优点：Delphi xe系列有大量的商业控件，这些控件可以让你的开发更加快捷。 CodeTyphon的优点：开源。 这个图片是安装后配置完成的样子，和Delphi 的xe10一样的结构。 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-03-24 20:31:24 "},"CodeTyphon/1_Intro.html":{"url":"CodeTyphon/1_Intro.html","title":"1.IDE介绍","keywords":"","body":"CodeTyphon简介 这里我们不做太多的介绍，将来自官网的介绍翻译给大家 官方地址：https://www.pilotlogic.com/sitejoom/index.php/wiki/84-wiki/codetyphon-studio/72-codetyphon-about Code Typhon是免费的下一代多操作系统“ Visual Programming Studio”。 适用于REAL Multi-OS，Multi-CPU，Multi-Platform和 Cross-Build本 机编程。 这是一个没有成本，自由和开放源码 “TERA”编程工作室， 它为您提供了构建任何类型的应用程序，库等，shang 没有限制。 有： Typhon V-IDE（可视化集成开发环境）。 对象Pascal编译器。 工具。 免费组件包。 免费库。 超多demo。 所有这些都是免费和开源的。 支持许多主机操作系统：Windows，Linux，MacOS，OpenIndiana，FreeBSD，OpenBSD，NetBSD，DragonFly和Solaris。 支持200多个OS-CPU平台目标。 CodeTyphon编程工作室完全免费，供您使用，开发，享受和共享。 这样，任何人都可以在没有法律麻烦的情况下将我们的作品用于自己的目的。 CodeTyphon的 设计易于操作，但功能强大，足以满足您的所有专业和工业编程需求。 在CodeTyphon的开发过程中，我们添加了许多新功能。 我们的重点是同时提供功能和可用性，并使您的软件开发愉快而又不会使您的感觉超负荷。 我们打算继续改进和稳定CodeTyphon，以便为您提供最佳的编程体验。 我们希望您会喜欢使用CodeTyphon。 如果不是这样，请向我们的论坛报告错误和建议，以帮助我们做得更好，如果不用代理论坛访问很慢 要获得帮助，您可以从这里开始 CodeTyphon被许可为：**免费软件**。 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-03-25 12:04:11 "},"CodeTyphon/2_Install.html":{"url":"CodeTyphon/2_Install.html","title":"2.IDE安装","keywords":"","body":"CodeTyphon安装流程 1.首先来确认下载 官方下载地址 ： https://www.pilotlogic.com/sitejoom/index.php/downloads.html 本站共享下载地址： 共享地址:http://u.280i.com/index.php?share/file&user=1&sid=4fVgQ96R 提取密码:2f1Ng、 2.解压压缩包到任意目录，（不要包含中文目录） 3.右键管理云模式运行 install.bat 由于我这里已经安装，就不截图了，首先 0 安装，会提示安装DirectX ，按照要求安装，记得去掉DirectX上的一个广告选项 接下来 1 安装，这个时候就会安装管理器。 由于我的管理器已经安装好 IDE，因此项目比较多，请勿着急，接下来才是真正的安装步骤 4.安装IDE环境，我们这里选择全部安装 （ bigIDE） 这里选择完整编译安装，如果需要32位的支持，可以安装32位的版本 此为编译过程。 由于软件需要编译后安装，因此对于机器的CPU要求比较高，我的机器较老，有点慢 5.编译安装完成后，桌面会生成对应的快捷方式，打开即可。也可以通过 CodeTyphon Center进入 第一个为软件中心，第二个就是我们的主角 Typhon Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-03-24 20:59:55 "},"CodeTyphon/3_Setting.html":{"url":"CodeTyphon/3_Setting.html","title":"3.界面配置","keywords":"","body":"界面配置 默认界面是分离模式，和Delphi7的默认格式一样 这个就是我们看到的默认界面 1.设置语言： Tools - Options General - Language - Chinese [zh_CN] --【OK】-- 重启IDE ，然后就能得到一个中文的IDE，虽然部分界面仍是英文，但是也不影响日常的使用工作。 2.设置窗口停靠 窗口 - Restore default layout ALL Docked 这里窗口就整合到一起了。 3.添加对应窗体 这里添加两个： 代码浏览器 和 组件 弹出的窗口拖拽黄色部门即可停靠，拖动标题栏是无法停靠的 调出工程查看器 依旧拖拽黄色部分停靠 最终这就是我们停靠后的截图效果。具体的还可以修改字体已经代码编辑区域的颜色等信息，这些均在设置中 配置完成还有一件事情，就是要保存窗体布局 default : 默认窗体布局 default docked: 默认窗体停靠布局 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-03-24 22:04:38 "},"CodeTyphon/4_Interface.html":{"url":"CodeTyphon/4_Interface.html","title":"4.界面介绍","keywords":"","body":"界面简介 界面推荐使用此类模式，对于22寸以上显示器比较适用，分辨率1920*1080以上推荐 此处图片若看不清，可用Ctrl+鼠标滚轮放大查看，或将图片右键存储后查看 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-03-26 21:23:24 "},"CodeTyphon/5_Property.html":{"url":"CodeTyphon/5_Property.html","title":"5.属性","keywords":"","body":"属性(此处会逐步完善) 属性默认显示正常字体，如果修改对应属性不是默认值，对应字体就变为粗体 属性 翻译 参数 配套控件 配套事件 说明 Action 动作 ActionList * 选择ActionList中的动作执行 ActiveControl 激活控件 默认激活的控件 align 对齐方式 Form中无效，控件中常用属性 AllowDropFiles 允许拖放文件 True/False DropFiles AlphaBlend Alpha透明 True/False 打开Alpha透明 AlphaBlendvalue Alpha透明值 0-255 确定窗体的透明度 0-255 Anchors 锚点 用来确定控件的对齐 AutoScroll 自动滚动 True/False 根据窗口自动生成滚动条 AutoSize 自动大小 True/False 根据内容自动调整大小 BiDiMode 为从右向左写的语言提供支持 BorderIcons 边框图标 BorderStyle 边框形状(样式) BorderWidth 边框宽度 Caption 标题/文字内容 ChildSizing Color 颜色 一般为窗体或者控件的可见颜色 Constraints 限制条件 Cursor 光标 光标在窗体或者空间上的光标形状 DefaultMonitor 默认显示器 程序显示在哪个默认显示器上 DesignTimePPI 设计时间PPI 写程序的时候的PPI DockSite 锚点 True/False DoubleBuffered 双重缓冲 True/False 重要用来解决有时候程序闪烁的问题 DragKind DragMode Enabled 可用 True/False 控件或窗体是否可用，不可用为灰色 FocusControl 焦点控件 TLabel Label中包含 &M，就代表按下Alt+M后，FocusControl中选择的控件即获得焦点 Font 字体 FormStyle 窗体样式 设置窗体类型以及最前显示 Height 高度 窗体或控件的高度 HelpContext 帮助ID号 HelpFile 帮助文件 HelpKeyword 帮助关键词 HelpType 帮助类型 Hint 提示信息 必须 ShowHint打开才可显示 HorzScrollBar 横向滚动条 Icon 图标 Form标题栏的图标 KeyPreview 按键预览 指定此窗体是否需在目前的ACTIVE组件之前取得键盘输入 Left 左边距 Menu 菜单 TMainMenu Name 名称 Text ParentBiDiMode True/False ParentDoubleBuffered True/False ParentFont 父字体 True/False Picture 图片 TImage ... 包含图片类控件的图片选择 PixelsPerInch PopupMenu 弹出菜单 TPopupMenu 右键菜单 PopupMode 弹出模式 PopupParent Position Proportional 锁定比例 缩放的时候按照比例缩放，需要Stretch属性开启 Scaled 缩放比例 True/False SessionProperties 会话属性 ShowHint 显示提示 True/False 鼠标放在窗体或者空间上显示Hint中的内容 ShowInTaskBar 任务栏显示 Stretch 延伸/缩放 TImage ... 按照控件大小自动缩放 StretchInEnabled 延伸缩小开启 TImage ... StretchOutEnabled 延伸放大开启 TImage ... Tag 标签 Top 高度 对应顶部的高度 Transparent 透明 控件透明 UseDockManager 使用停靠管理器 True/False VertScrollBar Visible 可见性 True/False Width 宽度 窗体或者控件的宽度 WindowState 窗口显示状态 最大化/最小化/全屏 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-03-29 11:21:01 "},"CodeTyphon/6_Event.html":{"url":"CodeTyphon/6_Event.html","title":"6.事件","keywords":"","body":"事件（逐步完善中） 事件 翻译 说明 Action 动作 和属性中的一样 ActiveControl 默认控件 和属性中的一样 Constraints 限制条件 和属性中的一样 Menu 菜单 和属性中的一样 OnActivate 激活时执行 程序被激活时 OnChangeBounds 变更边界 移动窗体，修改大小都会激活 OnClick 点击时执行 * OnClose 关闭时执行 * OnCloseQuery 关闭请求时执行 此事件优先于OnClose OnConstrainedResize 调整时执行 窗体移动，修改大小 OnContextPopup 右键请求PopupMenu时执行 即使没有PopupMenu依旧会执行 OnCreate 创建时执行 * OnDbClick 双击时执行 * OnDeactivate 取消激活状态时执行 也就是停用的时候激活 OnDestroy 销毁时执行 * OnDockDrop 停靠释放时执行 OnDockOver 停靠经过时执行 OnDragDrop 拖动释放 OnDragOver 拖动经过 OnDropFiles 拖放文件后执行 OnEndDock 停靠完成后执行 OnGetSiteInfo 获得锚点信息时执行 OnHelp 帮助按键时执行 F1 OnHide 隐藏时执行 * OnKeyDown 按键按下时执行 OnKeyPress 按键时执行 OnKeyUP 按键弹起时执行 OnMouseDown 鼠标按下时执行 OnMouseEnter 鼠标进入控件范围时执行 OnMouseLeave 鼠标离开控件方位时执行 OnMouseMove 鼠标移动时执行 OnMouseUp 鼠标弹起时执行 OnMouseWheel 鼠标滚轮滚动时执行 OnMouseWheelDown 滚轮向下时执行 OnMouseWheelHorze 滚轮横向滚动时执行 OnMouseWheelLeft 滚轮向左时执行 OnMouseWheelRight 滚轮向右时执行 OnMouseWheelUp 滚轮向上时执行 OnPaint 重绘界面时执行 *鼠标经过或者界面有变化都会绘制一次 OnResize 调整大小时执行 *启动时也算一次，因此正常后再进行判断 OnShortCut 按键时执行 *按下和弹起各算一次 OnShow 显示时执行 * OnShowHint 显示提示信息时执行 OnStartDock 开始停靠时执行 OnUnDock 未停靠时执行 OnUTF8KeyPress UTF8按键时执行 win10下我们的按键就是UTF8 OnWindowStateChange 窗体状态变化时执行 * PopupMenu 和属性中的一样 PopupParent 和属性中的一样 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-03-28 18:51:32 "},"CodeTyphon/7_TMainMenu.html":{"url":"CodeTyphon/7_TMainMenu.html","title":"Standard控件","keywords":"","body":"TMainMenu 主菜单 ​ 主菜单在大型软件中使用的较多，功能比较繁多的时候使用 主菜单控件 接下来双击窗体上的控件，来增加菜单选项 ​ 此处菜单的图标需要搭配 ImageList 来显示图形，此操作将在ImageList中讲解 【F9】运行程序，查看效果： ​ Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-03-26 11:39:00 "},"CodeTyphon/8_TPopupMenu.html":{"url":"CodeTyphon/8_TPopupMenu.html","title":"8.TPopupMenu","keywords":"","body":"TPopupMenu 弹出菜单 ​ 右键菜单，常用菜单，日常开发中使用频率很高。 添加控件 双击控件，配置菜单 配置弹出菜单响应位置： 选择Form1，在PopupMenu属性中，下拉选择新添加的 PopupMenu1 【F9】 运行程序，在窗体上右键查看效果 补充 控制顶级窗体相对于Window的WS_POPUP样式的行为。 该PopupMode属性控制顶层形式的行为相对于窗口的WS_POPUP风格。具有WS_POPUP样式的窗口在Z顺序中始终位于其“所有者”上方。您可以使用PopupMode结合属性与PopupParent属性，避免因背后显示在屏幕上的另一种形式了一个模态对话框挂起应用程序的外观。 注意：使用PopupMode属性类似于fsStayOnTop为FormStyle属性指定，但是可以更好地控制分层。 该PopupMode属性被自动设置为pmAuto当的ShowModal方法被调用。但是，这将导致重新创建窗口句柄，这通常是不希望的。为了避免重新创建窗口句柄，可以在调用ShowModal方法之前（例如在设计时）将PopupMode属性显式设置为。 pmAuto 对于非模式设计窗口（例如工具选项板和其他浮动工具窗口），将PopupMode属性设置pmExplicit为。这导致窗口始终保持在主窗体的顶部。如果是拼合设计（窗口停靠在主窗体中），则设计窗口保留在设计器顶部。 注意：对于未停靠的窗口，设计窗口将保留在主窗体上方，从而允许其他顶层窗体遮盖设计窗口。 如果希望弹出窗口具有Delphi 8之前的行为（将上述ShowModal项除外），则将PopupMode属性设置为。 pmNone 通过将PopupParent属性设置为显式的TCustomForm，可以强制窗体的Z排序并创建用户无法更改的“堆叠”外观。如果PopupMode属性为，pmExplicit而PopupParent为nil，则Application.MainForm隐式用作PopupParent。如果未分配Application.MainForm，则将Application.Handle用作PopupParent。如果PopupMode属性设置为pmAuto，则Screen.ActiveForm用作PopupParent。 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-03-28 22:44:58 "},"CodeTyphon/9_TButton.html":{"url":"CodeTyphon/9_TButton.html","title":"9.TButton","keywords":"","body":"TButton 按钮 日常软件操作的主要控件，必须熟练使用的控件，特别是控件对应的事件 添加Button控件到窗口 调整按钮大小 Caption 修改按钮名称 Align 对齐： Align=alButtom Align=alClient Align=alCustom Align=alLeft Align=alNone(默认) Align=alRight Align=alTop AutoSize 自动大小 ​ 选择AutoSize后，按钮会根据俺就中文字的长度和高度来自适应按钮的长度和高度 Cursor 光标形状 ​ 此处截图比较麻烦，设置为 crHandPoint ，鼠标移动到按钮上就会显示为手的形状 Enable 可用/禁用 ​ 显示效果： Font 字体 设置方式： 设置效果： Hint 提示信息 ShowHint 设置提示信息： 设置效果： Left & Top 左 和 上 左和上用来确定按钮位置 Height & Width 高度 和 宽度 高度和宽度确定按钮大小 Name 名字 控件的名字，日常命令操作的时候使用的就是这个名字 将按钮的Name 设置为 BtnMain ，然后在命令行中调用 命令： BtnMain.Caption := '按钮名字'; 效果： Visible 可见性 设置为True ：按钮可以看到 设置为False：按钮无法看到 IDE界面： 运行效果： Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-03-26 11:37:17 "},"CodeTyphon/10_TLabel.html":{"url":"CodeTyphon/10_TLabel.html","title":"10.TLabel","keywords":"","body":"TLabel 标签 日常使用中，主要用来可视化标注 控件 修改Caption 来修改显示内容 其他日常操作 修改字体 Font 修改鼠标类型 Cursot 修改自动大小 AutoSize 修改文字在空间中的对齐方式：Layout ： 【alBottom】底部对齐【alCenter】中间对齐【alTop】顶部对齐 修改提示信息 Hint &ShowHint 是否显示 VIsible ，一般在命令中修改 FocusControl:此参数为默认焦点，根据Label中的Caption中的热键属性来确定激活哪个控件 示例代码 Label1.caption := 'Label1显示的内容'; Label1.Font.Height := 120; //其他内容也可以这样修改，输入.后稍等下，会出现此控件对应的方法和属性以及事件。 Label1.caption := 'Label1显示的内容(&M)'; Label1.FocusControl := Edit2;//这里执行完成后，只需要点击 Alt + M 就可以将焦点移动到Edit2这个控件中。 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-03-29 11:17:40 "},"CodeTyphon/11_TEdit.html":{"url":"CodeTyphon/11_TEdit.html","title":"11.TEdit","keywords":"","body":"TEdit 编辑框 编辑框为交互信息的时候必须的组件，其他控件也可实现，但是此控件用的最多，例如：输入用户名和密码 添加控件 修改显示内容 属性简介 示例代码： Edit1.text := 'Edit1这个控件显示的内容'; Edit1.AutoSize := False;//关闭自动大小设置，后面修改高度才能生效 Edit1.Height := 50;//修改高度为50 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-03-26 13:12:06 "},"CodeTyphon/12_TMemo.html":{"url":"CodeTyphon/12_TMemo.html","title":"12.TMemo","keywords":"","body":"TMemo 便签 此类控件，主要用于大量文字的简易显示，Word那种类型的文字在另外一个控件中，后面会讲到。 插入控件 编辑内容 显示效果 补充 Memo1.Lines.Append('字符串'); 在Memo最后一行加上一行指定文本 Memo1.Lies.Delete(10); 删除第11行 Memo1.Lines.Insert(1,'新一行'); 在第2行插入新行 Memo1.Alignment 指定段落的对齐方式 Memo1.Modified Boolean类型,文本是否被修改 Memo1.WantReturns Boolean类型，当回车时是否输入一个回车符，如不为否，则当事件处理 Memo1.WantTabs 同上 Memo1.ScrollBars 选择滚动条，ssNone[无]，ssHorizontal[只有水平],ssVertical[只有垂直]，ssBoth[同时有水平和垂直] Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-03-29 19:50:59 "},"CodeTyphon/13_TToggleBox.html":{"url":"CodeTyphon/13_TToggleBox.html","title":"13.TToggleBox","keywords":"","body":"TToggleBox 滑动开关 此控件Delphi中有对应的，这里的默认显示效果不如Delphi中的显示效果，需要微调 添加控件 控件属性 控件效果 示例代码： if ToggleBox1.checked then begin //这里是要执行的任务 end; 补充 AllowGrayed：反向，就是选中为False，不选中为True Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-03-29 21:04:26 "},"CodeTyphon/14_TCheckBox.html":{"url":"CodeTyphon/14_TCheckBox.html","title":"14.TCheckBox","keywords":"","body":"TCheckBox 选择框（多选框） 这里的选择框是多选框，也就是日常碰到的正方形的选择框，可以多选 添加控件 控件属性 显示效果 示例代码 procedure TForm1.Button1Click(Sender: TObject); begin if CheckBox1.Checked then begin CheckBox2.Checked:=True; CheckBox3.Checked:= not CheckBox3.Checked; end else begin CheckBox2.Checked:= False; end; end; 补充 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-03-26 13:12:35 "},"CodeTyphon/15_TRadioButton.html":{"url":"CodeTyphon/15_TRadioButton.html","title":"15.TRadioButton","keywords":"","body":"TRadioButton 单选按钮 单选按钮顾名思义只能选择一个，但是如果需要2个以上的时候可以使用CheckBox。 如果是几组单选则可以使用后面的控件TRadioGroup，这样每个组里面只能存在一个Checked。 添加控件 控件属性（和ToggleBox，CheckBox 一样，重点是checked属性） 控件效果 示例代码 procedure TForm1.Button1Click(Sender: TObject); begin if RadioButton2.Checked then begin Form1.Caption := ' RadioButton2.checked'; end else begin Form1.Caption := ' RadioButton2.unchecked'; end; end; Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-03-26 13:12:45 "},"CodeTyphon/16_TListBox.html":{"url":"CodeTyphon/16_TListBox.html","title":"16.TListBox","keywords":"","body":"TListBox 列表 列表主要逐行显示，可以选择 添加控件 设置内容 运行效果 示例代码 procedure TForm1.Button1Click(Sender: TObject); begin ListBox1.Items.Add('添加一行'); end; procedure TForm1.Button2Click(Sender: TObject); begin ListBox1.DeleteSelected; end; procedure TForm1.Button3Click(Sender: TObject); begin ListBox1.Clear; end; procedure TForm1.Button4Click(Sender: TObject); begin ListBox1.Items.Delete(2); //这里的2，就是第三行，因为编号是从0开始的 end; procedure TForm1.Button5Click(Sender: TObject); begin ListBox1.Items.LoadFromFile('s.txt'); end; procedure TForm1.Button6Click(Sender: TObject); begin ListBox1.Items.SaveToFile('m.txt'); end; procedure TForm1.Button7Click(Sender: TObject); begin Form1.Caption := ListBox1.Items[ListBox1.ItemIndex]; end; 补充 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-03-30 19:34:48 "},"CodeTyphon/17_TComboBox.html":{"url":"CodeTyphon/17_TComboBox.html","title":"17.TComboBox","keywords":"","body":"TComboBox 组合框（也是就下拉框） 下拉框日常中用的比较多，主要记住调用下拉框选项的方法 添加控件 控件属性 运行效果（自动补全；自动下拉） 示例代码 procedure TForm1.Button1Click(Sender: TObject); begin Form1.Caption:= ComboBox1.Items[ComboBox1.ItemIndex];//这里的用法和ListBox是一样的 end; 补充 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-03-26 20:18:48 "},"CodeTyphon/18_TScrollBar.html":{"url":"CodeTyphon/18_TScrollBar.html","title":"18.TScrollBar","keywords":"","body":"TScrollBar 滚动条 老式滚动条，用处还是不少的。 添加控件 控件属性 运行效果 示例代码 procedure TForm1.ScrollBar1Change(Sender: TObject); begin Edit1.Text:= ScrollBar1.Position.ToString; end; 补充 一下内容转载自：https://www.cnblogs.com/guorongtao/p/11880391.html DELPHI的滚动条默认发送消息格式： function TControl.Perform( Msg: Cardinal; WParam: WPARAM; LParam: LPARAM ): LRESULT; 如：Memo1.Perform(WM_HSCROLL, SB_LEFT, 0); 水平滚动条 消息 WM_HSCROLL SendMessage(Memo1.Handle, WM_HSCROLL, MAKEWPARAM(SB_THUMBPOSITION, 50), 0); //滚动至此 SendMessage(Memo1.Handle, WM_HSCROLL, SB_LEFT, 0); //左边缘 SendMessage(Memo1.Handle, WM_HSCROLL, SB_RIGHT, 0); //右边缘 SendMessage(Memo1.Handle, WM_HSCROLL, SB_PAGELEFT, 0); //向左翻页 SendMessage(Memo1.Handle, WM_HSCROLL, SB_PAGERIGHT, 0); //向右翻页 SendMessage(Memo1.Handle, WM_HSCROLL, SB_LINELEFT, 0); //向左滚动 SendMessage(Memo1.Handle, WM_HSCROLL, SB_LINERIGHT, 0); //向右滚动 垂直滚动条 消息 WM_VSCROLL SendMessage(Memo1.Handle, WM_VSCROLL, MAKEWPARAM(SB_THUMBPOSITION, 50), 0); //滚动至此 50为位置 滚动到指定行号 SendMessage(Memo1.Handle, WM_VSCROLL, SB_TOP, 0); //顶部 SendMessage(Memo1.Handle, WM_VSCROLL, SB_BOTTOM, 0); //底部 SendMessage(Memo1.Handle, WM_VSCROLL, SB_PAGEUP, 0); //向上翻页 SendMessage(Memo1.Handle, WM_VSCROLL, SB_PAGEDOWN, 0); //向下翻页 SendMessage(Memo1.Handle, WM_VSCROLL, SB_LINEUP, 0); //向上滚动 SendMessage(Memo1.Handle, WM_VSCROLL, SB_LINEDOWN, 0); //向下滚动 //获得滚动条的位置 The GetScrollPos function retrieves the current position of the scroll box (thumb) in the specified scroll bar. The current position is a relative value that depends on the current scrolling range. For example, if the scrolling range is 0 through 100 and the scroll box is in the middle of the bar, the current position is 50. {GetScrollPos函数检索指定滚动条中滚动框（拇指）的当前位置。当前位置是一个相对值，取决于当前滚动范围。 例如，如果滚动范围为0到100，并且滚动框位于条的中间，则当前位置为50。} int GetScrollPos( HWND hWnd, int nBar ); var h, v: Integer; begin h := GetScrollPos(Memo1.Handle, SB_HORZ); v := GetScrollPos(Memo1.Handle, SB_VERT); Caption := Format('水平数值=%d 垂直数值=%d', [h, v]); end; //显示和隐藏滚动条 ShowScrollBar(Memo1.Handle,SB_HORZ,false); //隐藏MEMO水平滚动条 ShowScrollBar(Memo1.Handle,SB_VERT,false); //隐藏MEMO垂直滚动条 //判断 滚动条是否出现 procedure TForm1.Button1Click(Sender: TObject); begin if (GetWindowlong(Memo1.Handle, GWL_STYLE) and WS_VSCROLL) > 0 then ShowMessage('垂直滚动条显示'); if (GetWindowlong(Memo1.Handle, GWL_STYLE) and WS_HSCROLL) > 0 then ShowMessage('水平滚动条显示'); end; Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-01 11:06:48 "},"CodeTyphon/19_TGroupBox.html":{"url":"CodeTyphon/19_TGroupBox.html","title":"19.TGroupBox","keywords":"","body":"TGroupBox 组合框 组合框，组合框内的控件会跟随组合框的移动而整体移动 添加控件 设置属性 运行效果（此控件效果和属性图片一样） 示例代码 此控件一般不用代码，如果用代码也是修改标题和颜色而已 补充 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-03-26 20:18:56 "},"CodeTyphon/20_TRadioGroup.html":{"url":"CodeTyphon/20_TRadioGroup.html","title":"20.TRadioGroup","keywords":"","body":"TRadioGroup 单选组 日常使用的比较多，特别是超过一个单选情况下使用 添加控件 设置属性 运行效果 示例代码 补充 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-03-26 20:18:59 "},"CodeTyphon/21_TCheckGroup.html":{"url":"CodeTyphon/21_TCheckGroup.html","title":"21.TCheckGroup","keywords":"","body":"TCheckGroup 多选组 也是为了方便管理设置的，不像RadioGroup那么重要。 添加控件 控件属性 运行效果 示例代码 补充 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-03-26 20:19:01 "},"CodeTyphon/22_TPanel.html":{"url":"CodeTyphon/22_TPanel.html","title":"22.TPanel","keywords":"","body":"TPanel 面板 窗口布局的最重要控件，日后UI大神的必会控件 添加控件 属性设置 运行效果 示例代码 //Align 也可以使用代码直接编辑 Panel1.Align := alLeft; Panel2.Align := alClient; Panel3.Align := alBottom; 补充 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-03-26 20:25:06 "},"CodeTyphon/23_TFrame.html":{"url":"CodeTyphon/23_TFrame.html","title":"23.TFrame","keywords":"","body":"TFrame 框架 框架是很多新人很困惑的地方，放在窗体上有没有什么作用，其实是误解了Frame的用处，Frame是用来预制一个窗体的布局，后面可以快速调用，这样很方便。 新建Frame ​ 这里自动修改为小写了 属性设置（Frame的属性，不用修改） 运行效果 示例代码 补充 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-03-26 20:39:46 "},"CodeTyphon/24_TActionList.html":{"url":"CodeTyphon/24_TActionList.html","title":"24.TActionList","keywords":"","body":"TActionList 动作列表 此控件为开发过程中使用频率比较高的控件，常用的一些操作可以写在 ActionList里面，那里需要执行对应的代码只需要在控件的Action里面选择ActionList中的Action即可。 此控件和第一个以及第二个控件一样，属于不可视的控件。 添加控件 设置属性 运行效果 示例代码 procedure TForm1.Act01Execute(Sender: TObject); begin ShowMessage('Act01'); end; procedure TForm1.Act02Execute(Sender: TObject); begin ShowMessage('Act02'); end; 补充 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-03-26 20:50:54 "},"CodeTyphon/25_sum.html":{"url":"CodeTyphon/25_sum.html","title":"25.第一部分控件小结","keywords":"","body":"Standard部分控件总结 Standard部分控件，是我们常用的，此部分的控件基本上对我们的要求就是熟悉各个属性，有些属性所见即所得，有些属性需要运行后才可以看到。 属性是一个新用户对于IDE必须掌握的基础，只有掌握属性后才能在代码部分调用并修改。 此处有兴趣的朋友可以一起看看下面的几个作业题 做一个类似登录的窗口 使用Label,Edit,Button, 做一个类似Word2003那样的菜单栏和右键菜单 使用Menu控件 做一个单选题和多选题的界面 使用Group类控件 使用Panel做一个布局的界面 Panel的Align属性 使用ActionList 来执行对应的任务 ShowMessage('这里是要显示的内容'); 接下来将讲解事件，了解了事件就能确定程序在何时执行那一段代码。 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-03 09:52:02 "},"CodeTyphon/26_Identifier.html":{"url":"CodeTyphon/26_Identifier.html","title":"语法基础（仅用于熟悉后期控件）","keywords":"","body":"Identifier标识符 标识符是Pascal语言的基础。 常用标识符： var:变量 Const:常量 Type:类型 Procedure:过程 Function:函数 Method:方法 Unit:单元 标识符分为三类：标注标识符；自定义标识符；限定标识符。 标准标识符：这些带定义变量的时候是不能使用的。 常量：False / True / cdGrayed等 类型：Boolean Integer Char 等 函数：Cos，Sin，Abs等 过程：get，put，new等 文件：input，output等 自定义标识符：自定义标识符是我们开发中最常用的，一定要避免和标准标识符冲突。 不能带空格 不区分大小写 只能字符或者下划线开头 不要超过225个字符 就是不能使用标准标识符或者其他系统预留的功能以及函数作为自定义标识符名称 限定标识符：用来限定某一个单元，然后调用单元内部的方法或者函数 例如： var a:real; a:=system.cos(pi); 系统保留字，这里其实就是pascal语言默认使用的一些标识符。 例如：and if then with 等日常编辑软件中使用的一些命令 and array as asm begin case class const constructor destructor dispinterface div do downto else end except exports file finalization finally for function goto if implementation in inherited initialization inline interface is label library mod nil not object of or out packed procedure program property raise record repeat resourcestring set shl shr string then threadvar to try type unit until uses var while with xor 指令符：程序一般会默认生成的，命名的时候也要避开 Object Pascal中规定的指令符有39个 说明：指令符private、protected、public、published和automated在定义对象类型时也作为保留字，而在其他场合则作为指令符。 注释：注释分为可读性和可维护性 组合1：两个大括号包含的部分 { 这里是注释 } //必须成对出现，一一对应，不能嵌套 组合2：两个单括号和星号组成的 ( 这里是注释 ) 单符号： 两个斜杠后面的部分 //这里是注释 { 或者 (* 后面紧跟$ 表示是编译指令，这种主要用来处理编译过程中的一些内容，此类内容新手勿碰 由于上面部分理解起来比较困难，因此后面分开介绍具体代码操作 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-03 10:19:05 "},"CodeTyphon/27_Type.html":{"url":"CodeTyphon/27_Type.html","title":"27.数据类型","keywords":"","body":"Type数据类型 数据类型是日常需要考虑的一个很重要的问题，我们写代码的就是为了更为方便的操作数据，所以对数据的类型要求极为重要。 Pascal语言对于数据的类型检查严格，类型不匹配的统一不处理，但是可以通过类型转换转换为需要的数据类型。 数据类型分为：标准数据类型；高级数据类型 标准数据类型：就是系统里面已经定义的数据类型 高级数据类型：其实就是自己定义的数据类型 分类 范围 字节 备注 简单类型 序数 整数 Integer -2147483648 .. 2147483647 4 有符号32位 Cardinal 0 .. 4294967295 4 无符号32位 Shortint -128 .. 127 1 有符号8位 Smallint -32768 .. 32767 2 有符号16位 Longint -2147483648 .. 2147483647 4 有符号32位 Int64 -263 .. 263 8 有符号64位 Byte 0 .. 255 1 无符号8位 Word 0 .. 65535 2 无符号16位 Longword 0 .. 4294967295 4 无符号32位 字符 AnsiChar(Char) ANSI字符集 8位 WideChar Unicode字符集 16位 布尔 Boolean False 1 ByteBool False <> True Ord(False) = 0 Ord(True) <> 0 Succ(False) = True Pred(False) = True 1 WordBool 2 LongBool 4 枚举 子界 实数 Real 5.0×10-324 .. 1.7×10308 8 [精度]15..16 Real48 2.9×10-39 .. 1.7×1038 6 [精度]11..12; 向后兼容 Single 1.5×10-45 .. 3.4×1038 4 [精度]7..8 Double 5.0×10-324 .. 1.7×10308 8 [精度]15..16 Extended 3.6×10-4951 .. 1.1×104932 10 [精度]19..20 Comp -263 + 1 .. 263 - 1 8 [精度]19..20 Currency -922337203685477.5808 .. 922337203685477.5807 8 [精度]19..20 字符串 ShortString 255个字符 2..256B 向后兼容 AnsiString 大约 231 个字符 4B..2GB 8位(ANSI)字符 WideString 大约 230 个字符 4B..2GB 多用户服务和 多语言应用程序; 和com定义的BSTR兼容 其他 String String[0..255] PChar PAnsiString PWideString 结构类型 集合 Set 最多256个元素[0..255] 数组 静态数组 动态数组 记录 Record 文件 File 类 Class 类引用 Class reference 接口 Interface 指针类型 无类型指针 Pointer 有类型指针 预定义类型指针 PAnsiString PString PByteArray PCurrency PDouble PExtended PSingle PInteger POleVariant PShortString PTextBuf PVarRec PVariant PWideString PWordArray 过程类型 程序过程类型 Procedural 对象过程类型 Procedural 变体类型 Variant OleVariant 数据类型之间的转换 例程 作用 Chr 将一个有序数据转换为一个ANSI字符 Ord 将一个有序类型值转换为它的序号 Round 转换一个实型值为四舍五入后的整型值 Trunc 转换一个实型值为小数截断后的整型值 Int 返回浮点数的整数部分 IntToStr 将数值转换为字符串 IntToHex 将数值转换为十六进制数字符串 StrToInt 将字符串转换为一个整型数，如字符串不是一个合法的整型将引发异常 StrToIntDef 将字符串转换为一个整数，如字符串不合法返回一个缺省值 Val 将字符串转换为一个数字（传统Turbo Pascal例程用于向后兼容） Str 将数字转换为格式化字符串（传统Turbo Pascal例程用于向后兼容） StrPas 将零终止字符串转换为Pascal类型字符串，在32位Delphi中这种类型转换是自动进行的 StrPCopy 拷贝一个Pascal类型字符串到一个零终止字符串, 在32位Delphi中这种类型转换是自动进行的 StrPLCopy 拷贝Pascal类型字符串的一部分到一个零终止字符串 FloatToDecimal 将一个浮点数转换为包含指数、数字及符号的十进制浮点记录类型 FloatToStr 将浮点值转换为缺省格式的字符串 FloatToStrF 将浮点值转换为特定格式的字符串 FloatToText 使用特定格式，将一个浮点值拷贝到一个字符串缓冲区 FloatToTextFmt 同上面例程，使用特定格式，将一个浮点值拷贝到一个字符串缓冲区 StrToFloat 将一个Pascal字符串转换为浮点数 TextToFloat 将一个零终止字符串转换为浮点数 以上转换方式在最新的ide中有更加简便的方式 .to模式，在IDE中只要输入到 . 然后稍等就会弹出对应的方法或者 例如： s:= '2'; s:= s.ToInteger; //这里就将【字符串类型的s】转换为【数字类型的s】 s := s * 2; //这里就可以将s 乘以 2 返回给 s 高级数据类型 枚举类型：例如每周的星期几就可以定义： 格式:　type 枚举类型标识符=(标识符1,标识符2,…,标识符n) type days=(sun,mon,tue,wed,thu,fri,sat); colors=(red,yellow,blue,white,black,green); 枚举类型中的参数不能相同，枚举类型的数据只能赋值操作，不能进行运算操作， type days=(sun,mon,tue,wed,thu,fri,sat); 　　colors=(red,yellow,blue,white,black,green); var color:colors; 　　 weekday:days; 　//则下面语句是合法的: 　weekday:=mon; 　if weekday=sun then write('rest'); 　//而下面语句是不合法的: mon:=1; //错把枚举值当成变量名； weekday:=blue； //枚举值blue不属于枚举变量weekday的值域； read(color); //枚举类型变量 不能用读语句进行赋值； write(weekday); writeln(blue);//不能通过写语句输出枚举类型的变量值和枚举值。 可以把变量的说明与类型的定义合并在一起，如: 　　var 　　 holiday,workday:(sun,mon,tue,wed,thu,fri,sat); 　　　 color:(red,yellow,blue,white,black,green); 子界类型 type 子界类型标识符=常量1..常量2 type letter='a'..' z '; var ch1,ch2:letter; 可以合并成: var ch1,ch2:'a'..'d'; 集合类型 集合类型的一般形式为： set of 基类型;集合中的数据无顺序 type numbers = set of 0..9; ch = set of char; day = (sun, mon, tue, wed, thu, fri, sat); var s: numbers; c: ch; weekday: day; 可以将类型说明与变量说明合并在一起，如: var s:set of 0..9; { 子界型 } c:set of char; weekday: (sun,mon,tue,wed,thu,fri,sat); { 枚举型 } Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-03 19:40:11 "},"CodeTyphon/28_ConstantsAndVariables.html":{"url":"CodeTyphon/28_ConstantsAndVariables.html","title":"28.常量和变量","keywords":"","body":"Constants and variables 常量和变量 常量分为两种：一种系统的常量，一种自定义的常量 系统常量即为一些日常的基本参数，如pi等 自定义常量日常使用较多 使用Const来定义，常量会自动盘点自己的类型，因此不用指定数据类型。 Const name1 = 'Houzi'; name2 = 'taozi'; var Form1: TForm1; implementation {$R *.frm} { TForm1 } procedure TForm1.Button1Click(Sender: TObject); begin Edit1.Text:= name1; Edit2.Text:=name2; end; 最新的还有 ResourceString 此方式会将字符串保存到系统特定区域，有利于对程序进行多语言开发 resourcestring AuthorName = 'Marco Cantù'; BookName = 'Essential Pascal'; procedure TForm1.Button1Click(Sender: TObject); begin ShowMessage (BookName + #13 + AuthorName); end; https://www.pilotlogic.com/sitejoom/index.php/wiki/104-wiki/pascal-basics/chapter-1/117-pascal-constants.html 变量：自定义可变的部分。 使用 Var定义 变量一个要分清楚全局变量和私有变量 变量如果冲突，优先取值私有变量 unit Unit1; {$mode objfpc}{$H+} interface uses Classes, SysUtils, Forms, Controls, Graphics, Dialogs, StdCtrls; type { TForm1 } TForm1 = class(TForm) Button1: TButton; Edit1: TEdit; Edit2: TEdit; procedure Button1Click(Sender: TObject); private public end; var Form1: TForm1; name3:string //这里整个单元可用，而且其他调用了此单元的单元也可以使用 implementation {$R *.frm} { TForm1 } procedure TForm1.Button1Click(Sender: TObject); var //此处变量仅在下面的begin和end之间有用 //name:string; //此处使用的系统属性的的名称，因此会报错 name1,name2:string; begin name :='name'; name1 := 'zhangsan'; //name2 := 'lisi'; //name2 未赋值，结果会显示空 //变量在使用前必须复制，养成好习惯，否则程序出错不好找 Edit1.Text:= name1; Edit2.Text:=name2; end; end. https://www.pilotlogic.com/sitejoom/index.php/wiki/104-wiki/pascal-basics/chapter-1/116-pascal-variable-types.html Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-06 19:58:09 "},"CodeTyphon/29_Operators.html":{"url":"CodeTyphon/29_Operators.html","title":"29.运算符","keywords":"","body":"Operators 运算符 运算符分为：单目运算符，双目运算符 算术运算符：+ - * / 等日常运算 运算顺序：由左向右 运算符优先级：【+取正 -取负】> 【*乘法 /除法】>【Div整除 Mod求余】>【+加法 - 减法】 布尔运算符 True/False; NOT：非 AND与 OR或 XOR异或 位运算符 | 运算符 | 操作举例 | 操作数类型 | 结果类型 | 功能说明 | | ---------- | ------------ | -------------- | ------------ | ------------------------------------------------ | | NOT | NOT x | integer | integer | 即按二进制形式将每位求反 | | AND | a AND b | integer | integer | 将两者相对应的位进行AND运算 | | OR | a OR b | integer | integer | 将两者相对应的位进行OR运算 | | XOR | a XOR b | integer | integer | 将两者相对应的位进行取XOR运算，两者不同时结果为1 | | SHL | a SHL b | integer | integer | 将a的二进制值向左移动b位，左移一位相当于乘2 | | SHR | a SHR b | integer | integer | 将a的二进制向右移动b位，右移一位相当于除2 | 关系运算符 | 关系符 | 操作 | 操作数类型 | 结果类型 | | ---------- | -------- | ------------------------------------------------------ | ------------ | | = | 等于 | 简单类型，字符串或可变类型，类，类引用，指针，集合类型 | Boolean | | <> | 不等于 | 简单类型，字符串或可变类型，类，类引用，指针，集合类型 | Boolean | | | 大于 | 简单类型，字符串或可变类型 | Boolean | | = | 大于等于 | 简单类型，字符串或可变类型 | Boolean | 字符串运算符 常用字符串运算符 ： + 运算符的优先级 | 优先顺序 | 运算符 | 分类描述 | | ------------ | ----------------------- | ------------------------------ | | 1 | @（取地址）,NOT,- | 一元运算符 | | 2 | *,/,DIV,MOD,AND,SHL,SHR | 乘除及类型强制转换运算符 | | 3 | +,－,OR,XOR | 加减运算符 | | 4 | =,,, =,in,is | 关系、集合成员及类型比较运算符 | Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-06 22:02:06 "},"CodeTyphon/30_Statement.html":{"url":"CodeTyphon/30_Statement.html","title":"30.语句入门","keywords":"","body":"Statement语句 按语句的描述形式，可分为简单语句、结构语句和复合语句等 var a:integer; //声明语句 b,c:integer; //... begin //这里面的就是可执行语句 //从这个begin到对应的End就是一个复合语句 a:= b+c; //运算后赋值 //这也是一个简单语句 end; 赋值语句 ​ 在Pascal中赋值语句是使用 := 来进行赋值操作，就是一个冒号一个等号 条件语句 if 对if-then型语句， 仅当条件满足时，语句才执行；对if-then-else型，if语句在两条语句中选择一条执行。条件用布尔表达式建立. case of 如果你的if语句变得非常复杂，有时可以用case语句代替它。case语句包括用来选值的表达式、可能值序列或一个取值范围。这些值应该是常量，并且它们必须唯一，而且应属于有序类型。 for Pascal 中的for循环严格地建立在计数器基础上，循环每执行一次，计数器不是增加一个值就是减小一个值。 while & repeat while-do 循环语句和 repeat-until 语句的不同点在于repeat 循环语句的代码至少要执行一次。 With With语句是一种用于简化代码的语句。 如你要访问一个记录类型变量（或一个对象），用With语句就不必每次重复变量的名字。 Break 强制退出最近的一层循环（注意：只能放在循环里；而且是只能跳出最近的一层循环），用于从for、while、repeat语句中强制退出 Continue 用于从for、while、repeat语句中结束循环内的本次处理,继续从循环体的开始位置继续执行类似于C/C++等语言中的continue的功能 Exit 用于从当前代码块中退出. 若该代码是主程序，则终止该程序。 如果是函数或过程，则立即终止该函数或过程 Abort: 终止程序需的运行，产生不报错的异常信息。跳出祖先模块。 Halt: 用于强行终止应用程序的执行，返回操作系统（非正常退出方式） Runerror: 终止程序的执行，并产生运行错误（返回错误代码） Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-03 13:18:20 "},"CodeTyphon/31_If.html":{"url":"CodeTyphon/31_If.html","title":"31.If","keywords":"","body":"if语句 if 条件 then 执行 if a > b then begin Showmessage('a>b'); end; if 条件 then 执行1 else 执行2 if a > b then //a >b 执行1 ，否则 执行2 begin //执行1 ShowMessage('a>b'); end else begin //执行2 ShowMessage('a if 条件1 then 执行1 else if 条件2 then 执行2 else 执行3 if a>b then begin ShowMessage('a>b'); end else if a=b then begin ShowMessage('a=b'); end else begin ShowMessage('a 此循环可以无限嵌套，但是嵌套的比较多了之后需要仔细分析处理的逻辑是否严谨 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-06 22:45:43 "},"CodeTyphon/32_Caseof.html":{"url":"CodeTyphon/32_Caseof.html","title":"32.Case of","keywords":"","body":"Case of 语句 Case of 语法 case(expression) of L1 : S1; L2: S2; ... ... Ln:Sn; end; L1-Ln 可以使用 整数 字符 布尔 枚举 这几种类型 case语句必须有一个end语句与之关联。 流程图 官方样例 program checkCase; var grade:char; begin grade :='A'; case(grade) of 'A': writeln('Excellent!'); 'B','C': writeln('Well done'); 'D': writeln('You passed'); 'F': writeln('Better try again'); end; writeln('Your grade is ', grade ); end. 运行结果 Excellent! Your grade is A Case of else 语句 case(expression) of L1 : S1; L2 : S2; ... ... Ln:Sn; else Sm; end; 流程图 官方样例 program checkCase; var grade:char; begin grade :='F'; case(grade) of 'A': writeln('Excellent!'); 'B','C': writeln('Well done'); 'D': writeln('You passed'); else writeln('You really did not study right!'); end; writeln('Your grade is ', grade ); end. 运行结果 You really did not study right! Your grade is F Case of else 嵌套语句 嵌套语句由于比较复杂，不适合新手教学，所以不多做解释，需要看的可以查看下面的连接 https://www.pilotlogic.com/sitejoom/index.php/wiki/105-wiki/pascal-basics/chapter-2/133-pascal-nested-case-statements.html Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-07 19:41:37 "},"CodeTyphon/33_For.html":{"url":"CodeTyphon/33_For.html","title":"33.For","keywords":"","body":"For语句 For循环语法 for:= to [down to] do S; //如下 for i:=1 to 10 do writeln(i); For循环注意运行次数，必须明确运行几次，才好处理其中的代码 必须使用整数 流程图 官方样例 program forLoop; var a: integer; begin for a :=10 to 20 do begin writeln('value of a: ', a); end; end. 运行结果 value of a: 10 value of a: 11 value of a: 12 value of a: 13 value of a: 14 value of a: 15 value of a: 16 value of a: 17 value of a: 18 value of a: 19 value of a: 20 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-07 20:06:46 "},"CodeTyphon/34_While.html":{"url":"CodeTyphon/34_While.html","title":"34.While","keywords":"","body":"While语句 While循环语法 while (condition) do S; //如下 while number > 0 do begin sum := sum + number; number := number -2; end; While是先判断，然后执行，一般两种方式退出while 代码里面对while判断的参数进行修改，逐步超出while范围就退出了 在while内部判断，然后使用break或者其他语句退出,这里简易break 流程图 官方样例 program whileLoop; var a: integer; begin a :=10; while a 运行结果 value of a: 10 value of a: 11 value of a: 12 value of a: 13 value of a: 14 value of a: 15 value of a: 16 value of a: 17 value of a: 18 value of a: 19 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-10 15:16:43 "},"CodeTyphon/35_With.html":{"url":"CodeTyphon/35_With.html","title":"35.With","keywords":"","body":"With 语句 With 语法 with Memo1.lines do begin add('text'); end; With 主要就是用来快速处理控件内容的，相比传统每次书写控件名称要简洁很多。 代码样例 unit Unit1; {$mode objfpc}{$H+} interface uses Classes, SysUtils, Forms, Controls, Graphics, Dialogs, StdCtrls; type { TForm1 } TForm1 = class(TForm) Button1: TButton; Button2: TButton; Memo1: TMemo; procedure Button1Click(Sender: TObject); procedure Button2Click(Sender: TObject); procedure FormCreate(Sender: TObject); private public end; var Form1: TForm1; implementation {$R *.frm} { TForm1 } procedure TForm1.FormCreate(Sender: TObject); begin end; procedure TForm1.Button1Click(Sender: TObject); var i: integer; begin Memo1.Clear; for i := 0 to 10 do begin Memo1.Left := 10; Memo1.Top := 10; Memo1.Lines.Add('Num.' + i.tostring); end; end; procedure TForm1.Button2Click(Sender: TObject); var i:integer; begin Memo1.Clear; with Memo1 do //内部的代码就可以省掉 Memo1. begin Left := 15; Top := 15; for i:=0 to 9 do lines.Add('WithNun.'+i.tostring); end; end; end. Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-11 21:31:03 "},"CodeTyphon/36_Break.html":{"url":"CodeTyphon/36_Break.html","title":"36.Break","keywords":"","body":"Break 语句 Break主要作用： 强制退出最近的一层循环（注意：只能放在循环里；而且是只能跳出最近的一层循环），用于从for、while、repeat语句中强制退出 终止case语句中的case 终止循环-流程图 官方样例 program exBreak; var a: integer; begin a :=10; while (a15) then break; {terminate the loop} end; end. 输出结果 value of a: 10 value of a: 11 value of a: 12 value of a: 13 value of a: 14 value of a: 15 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-07 20:52:11 "},"CodeTyphon/37_Continue.html":{"url":"CodeTyphon/37_Continue.html","title":"37.Continue","keywords":"","body":"Continue语句 Continue; 用于从for、while、repeat语句中结束循环内的本次处理,继续从循环体的开始位置继续执行 流程图 官方样例 program exContinue; var a: integer; begin a :=10; (* repeat until loop execution *) repeat if( a =15)then begin (* skip the iteration *) a := a +1; continue; end; writeln('value of a: ', a); a := a+1; until( a =20); end. 运行结果 value of a: 10 value of a: 11 value of a: 12 value of a: 13 value of a: 14 value of a: 16 value of a: 17 value of a: 18 value of a: 19 Repeat 语句加入第二期的代码部分学习，本期只用来测试 Continue Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-07 20:51:41 "},"CodeTyphon/38_Repeat.html":{"url":"CodeTyphon/38_Repeat.html","title":"38.Repeat","keywords":"","body":"Repeat循环 语法 repeat sum := sum + number; number := number -2; until number =0; 流程图 官方样例 program repeatUntilLoop; var a: integer; begin a :=10; // repeat until loop execution // repeat writeln('value of a: ', a); a := a +1 until a = 20; end. 运行结果 value of a: 10 value of a: 11 value of a: 12 value of a: 13 value of a: 14 value of a: 15 value of a: 16 value of a: 17 value of a: 18 value of a: 19 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-11 21:10:53 "},"CodeTyphon/39_Goto.html":{"url":"CodeTyphon/39_Goto.html","title":"39.Goto","keywords":"","body":"Goto 语句 语法 goto label; ... ... label: statement; 流程图 官方样例 program exGoto; label 1; var a : integer; begin a :=10; (* repeat until loop execution *) 1: repeat if( a =15 )then begin (* skip the iteration *) a := a + 1; goto 1; end; writeln('value of a: ', a); a:= a + 1; until a = 20; end. 运行结果 value of a: 10 value of a: 11 value of a: 12 value of a: 13 value of a: 14 value of a: 16 value of a: 17 value of a: 18 value of a: 19 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-12 00:03:37 "},"CodeTyphon/40_HaltExitAbortRunerror.html":{"url":"CodeTyphon/40_HaltExitAbortRunerror.html","title":"40.退出命令","keywords":"","body":"Halt语句 用于强行终止应用程序的执行，返回操作系统（非正常退出方式） 基本和任务管理器结束进程差不多 Exit 语句 　用于从当前代码块中退出。 　若该代码是主程序，则终止该程序。 　如果是函数或过程，则立即终止该函数或过程 Abort 语句 直接终止调用所在的函数的代码块，退出整个调用过程 不像exit只退出自己的代码块 Runerror语句 终止程序的执行，并产生运行错误（返回错误代码） Close() 正常退出程序 Application.Terminate 直接终止程序，和Halt有异曲同工之效果 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-12 00:40:48 "},"CodeTyphon/41_Loops.html":{"url":"CodeTyphon/41_Loops.html","title":"41.循环总结","keywords":"","body":"循环总结 循环主要使用： if () then ​ if 语句判定条件是否为True来执行，熟悉else的使用，并列式else if 和嵌入Begin中的 if 有不同，仔细甄别 case () of ​ case一般用来判定整数，字符串，枚举等，一个参数多个结果的判断 while () do ​ 循环的一种，也可直接 While True do ，这样用来循环判定，然后用Exit来退出这个无限循环 for () do ​ 一定要清楚for循环会运行多少次，否则容易造成程序崩溃 repeat ... until ​ 此方法用起来比较简单，看的也比较明了，能用此命令的尽量不要去碰Goto命令，多重的goto会让程序看起来难以理解 Goto ​ 不推荐大家使用的一个命令，但是如果你是从按键精灵之类的软件过来的，那就可以先使用，然后慢慢的学会放弃这个 with ... do ​ 此方法最适合控制界面控件中的参数，简化使用 Break & Exit 区别 ​ 常用的两种，Break跳出本次循环，Exit退出函数或者过程 Continue的使用 ​ Continue只会跳过本次循环而已，不会像Break那样跳出循环 Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-12 00:38:18 "},"CodeTyphon/42_TBitBtn.html":{"url":"CodeTyphon/42_TBitBtn.html","title":"Additional控件","keywords":"","body":"Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-07 21:11:17 "},"CodeTyphon/43_TSpeedButton.html":{"url":"CodeTyphon/43_TSpeedButton.html","title":"43.TSpeedButton","keywords":"","body":"Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-07 21:11:31 "},"CodeTyphon/44_TStaticText.html":{"url":"CodeTyphon/44_TStaticText.html","title":"44.TStaticText","keywords":"","body":"Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-07 21:12:54 "},"CodeTyphon/45_TImage.html":{"url":"CodeTyphon/45_TImage.html","title":"45.TImage","keywords":"","body":"Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-07 21:45:01 "},"CodeTyphon/46_TShape.html":{"url":"CodeTyphon/46_TShape.html","title":"46.TShape","keywords":"","body":"Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-07 21:45:09 "},"CodeTyphon/47_TBevel.html":{"url":"CodeTyphon/47_TBevel.html","title":"47.TBevel","keywords":"","body":"Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-07 21:45:19 "},"CodeTyphon/48_TPaintBox.html":{"url":"CodeTyphon/48_TPaintBox.html","title":"48.TPaintBox","keywords":"","body":"Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-07 21:45:26 "},"CodeTyphon/49_TNotebook.html":{"url":"CodeTyphon/49_TNotebook.html","title":"49.TNotebook","keywords":"","body":"Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-07 21:45:34 "},"CodeTyphon/50_TLabeledEdit.html":{"url":"CodeTyphon/50_TLabeledEdit.html","title":"50.TLabeledEdit","keywords":"","body":"Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-07 21:45:41 "},"CodeTyphon/51_TSplitter.html":{"url":"CodeTyphon/51_TSplitter.html","title":"51.TSplitter","keywords":"","body":"Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-07 21:45:59 "},"CodeTyphon/52_TTrayIcon.html":{"url":"CodeTyphon/52_TTrayIcon.html","title":"52.TTrayIcon","keywords":"","body":"Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-07 21:46:06 "},"CodeTyphon/53_TControBar.html":{"url":"CodeTyphon/53_TControBar.html","title":"53.TControlBar","keywords":"","body":"Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-07 21:46:15 "},"CodeTyphon/54_TFlowPanel.html":{"url":"CodeTyphon/54_TFlowPanel.html","title":"54.TFlowPanel","keywords":"","body":"Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-07 21:46:21 "},"CodeTyphon/55_TMaskEdit.html":{"url":"CodeTyphon/55_TMaskEdit.html","title":"55.TMaskEdit","keywords":"","body":"Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-07 21:46:28 "},"CodeTyphon/56_TCheckListBox.html":{"url":"CodeTyphon/56_TCheckListBox.html","title":"56.TCheckListBox","keywords":"","body":"Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-07 21:46:35 "},"CodeTyphon/57_TScrollBox.html":{"url":"CodeTyphon/57_TScrollBox.html","title":"57.TScrollBox","keywords":"","body":"Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-07 21:46:42 "},"CodeTyphon/58_TApplicationProperties.html":{"url":"CodeTyphon/58_TApplicationProperties.html","title":"58.TApplicationProperties","keywords":"","body":"Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-07 21:46:49 "},"CodeTyphon/59_TStringGrid.html":{"url":"CodeTyphon/59_TStringGrid.html","title":"59.TStringGrid","keywords":"","body":"Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-07 21:46:55 "},"CodeTyphon/60_TDrawGrid.html":{"url":"CodeTyphon/60_TDrawGrid.html","title":"60.TDrawGrid","keywords":"","body":"Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-07 21:47:02 "},"CodeTyphon/61_TPairSplitter.html":{"url":"CodeTyphon/61_TPairSplitter.html","title":"61.TPairSplitter","keywords":"","body":"Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-07 21:47:08 "},"CodeTyphon/62_TColorBox.html":{"url":"CodeTyphon/62_TColorBox.html","title":"62.TColorBox","keywords":"","body":"Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-07 21:47:14 "},"CodeTyphon/63_TColorListBox.html":{"url":"CodeTyphon/63_TColorListBox.html","title":"63.TColorListBox","keywords":"","body":"Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-07 21:47:21 "},"CodeTyphon/64_TValueListEditor.html":{"url":"CodeTyphon/64_TValueListEditor.html","title":"64.TValueListEditor","keywords":"","body":"Copyright © 280i.com 2020 all right reserved，powered by Gitbook本书建立时间： 2020-04-07 21:47:27 "}}